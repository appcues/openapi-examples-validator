{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///external \"jsonpath-plus\"","webpack:///external \"errno\"","webpack:///external \"json-pointer\"","webpack:///./src/index.js","webpack:///external \"fs\"","webpack:///external \"path\"","webpack:///external \"glob\"","webpack:///./src/validator.js","webpack:///external \"ajv\"","webpack:///./src/impl/index.js","webpack:///./src/impl/v2/index.js","webpack:///./src/impl/v3/index.js","webpack:///./src/application-error.js","webpack:///./src/utils/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","_","fs","path","glob","jsonPath","JSONPath","createError","custom","getValidatorFactory","compileValidate","Determiner","ApplicationError","ERR_TYPE__VALIDATION","ERR_TYPE__JSON_PATH_NOT_FOUND","createValidationResponse","JsonPointer","PROP__SCHEMA","PROP__EXAMPLES","ErrorJsonPathNotFound","validateExamples","openapiSpec","pathsExamples","createValidator","_initValidatorFactory","validationMap","reduce","pathExample","pathSegs","toPathArray","slice","idxExamples","lastIndexOf","splice","length","toPathString","_getSchemaPathOfExample","_buildValidationMap","schemaPaths","jsonPathToSchemas","json","resultType","_extractSchemaPaths","getImplementation","getJsonPathToSchemas","statistics","_initStatistics","validationResult","valid","errors","forEach","pathSchema","example","dereferencedExample","flatten","wrap","callback","startsWith","pointer","substring","definition","_getExampleByPath","schema","_extractSchema","curErrors","_validateExample","map","error","examplePath","toPointer","_validateSchema","_validateExamplesPaths","jsonPathToExamples","_extractExamplePaths","getJsonPathToExamples","_validate","pathsSchema","validationHandler","schemasWithExamples","examplesTotal","examplesWithoutSchema","filePathExample","message","JSON","stringify","concat","validate","exampleFilePath","specSchema","allErrors","suppressErrorIfNotFound","_getObjectByPath","params","validateFile","filePath","parse","readFileSync","err","validateExample","filePathSchema","validateExamplesByMap","globMapExternalExamples","cwdToMappingFile","matchingFilePathsMapping","responses","sync","nonull","filePathMapExternalExamples","mapExternalExamples","keys","dirPathMapExternalExamples","entries","flatMap","filePathsExample","resolvedFilePathExample","join","_handleExamplesByMapValidation","dirname","assign","mapFilePath","merge","res","response","response1","response2","val","_mergeValidationResponses","Ajv","PROP__ID","JSON_PATH__REFS","ID__SPEC_SCHEMA","ID__SCHEMA","_replaceRefsToPreparedSpecSchema","type","payload","parent","parentProperty","options","preparedSpecSchema","refSchema","set","_createReferenceSchema","validator","addSchema","preparedSchema","idSchema","_prepareSchema","compile","implV2","implV3","REGEX__OPEN_API","swagger","openapi","match","PATH__EXAMPLES","PATH__SCHEMAS","ENOENT","code","cause","constructor","this","ERR_TYPE__JS_ENOENT"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"lodash\");","module.exports = require(\"jsonpath-plus\");","module.exports = require(\"errno\");","module.exports = require(\"json-pointer\");","const\n    _ = require('lodash'),\n    fs = require('fs'),\n    path = require('path'),\n    glob = require('glob'),\n    { JSONPath: jsonPath } = require('jsonpath-plus'),\n    { createError } = require('errno').custom,\n    { getValidatorFactory, compileValidate } = require('./validator'),\n    Determiner = require('./impl'),\n    ApplicationError = require('./application-error'),\n    { ERR_TYPE__VALIDATION, ERR_TYPE__JSON_PATH_NOT_FOUND } = ApplicationError,\n    { createValidationResponse } = require('./utils'),\n    JsonPointer = require('json-pointer');\n\n// CONSTANTS\n\nconst\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLES = 'examples';\n\n// STATICS\n\n/**\n * ErrorJsonPathNotFound\n * @typedef {{\n *      cause: {\n *          [params]: {\n *              [path]: string\n *          }\n *      }\n * }} ErrorJsonPathNotFound\n * @augments CustomError\n */\n\n/**\n * @constructor\n * @augments CustomError\n * @returns {ErrorJsonPathNotFound}\n */\nconst ErrorJsonPathNotFound = createError(ERR_TYPE__JSON_PATH_NOT_FOUND);\n\n// PUBLIC API\n\nmodule.exports = {\n    'default': validateExamples,\n    validateFile,\n    validateExample,\n    validateExamplesByMap\n};\n\n// IMPLEMENTATION DETAILS\n\n// Type definitions\n\n/**\n * ValidationStatistics\n * @typedef {{\n *      schemasWithExamples: number,\n *      examplesTotal: number,\n *      examplesWithoutSchema: number,\n *      [matchingFilePathsMapping]: number\n * }} ValidationStatistics\n */\n\n/**\n * ValidationResponse\n * @typedef {{\n *      valid: boolean,\n *      statistics: ValidationStatistics,\n *      errors: Array.<ApplicationError>\n * }} ValidationResponse\n */\n\n/**\n * @callback ValidationHandler\n * @param {ValidationStatistics}    statistics\n * @returns {Array.<ApplicationError>}\n */\n\n// Public\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {Object}  openapiSpec OpenAPI-spec\n * @returns {ValidationResponse}\n */\nfunction validateExamples(openapiSpec) {\n    const jsonPathToExamples = Determiner.getImplementation(openapiSpec).getJsonPathToExamples(),\n        pathsExamples = _extractExamplePaths(openapiSpec, jsonPathToExamples);\n\n    return _validateExamplesPaths(pathsExamples, openapiSpec);\n}\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {string}  filePath    File-path to the OpenAPI-spec\n * @returns {ValidationResponse}\n */\nfunction validateFile(filePath) {\n    let openapiSpec = null;\n    try {\n        openapiSpec = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return validateExamples(openapiSpec);\n}\n\n/**\n * Validates examples by mapping-files.\n * @param {string}  filePathSchema              File-path to the OpenAPI-spec\n * @param {string}  globMapExternalExamples     File-path (globs are supported) to the mapping-file containing JSON-\n *                                              paths to response-schemas as key and a single file-path or Array of\n *                                              file-paths to external examples\n * @param {boolean} [cwdToMappingFile=false]    Change working directory for resolving the example-paths (relative to\n *                                              the mapping-file)\n * @returns {ValidationResponse}\n */\nfunction validateExamplesByMap(filePathSchema, globMapExternalExamples, { cwdToMappingFile } = {}) {\n    let matchingFilePathsMapping = 0;\n    const responses = glob.sync(\n        globMapExternalExamples,\n        // Using `nonull`-option to explicitly create an app-error if there's no match for `globMapExternalExamples`\n        { nonull: true }\n    ).map(filePathMapExternalExamples => {\n        let mapExternalExamples = null,\n            openapiSpec = null;\n        try {\n            mapExternalExamples = JSON.parse(fs.readFileSync(filePathMapExternalExamples, 'utf-8'));\n            openapiSpec = JSON.parse(fs.readFileSync(filePathSchema, 'utf-8'));\n        } catch (err) {\n            return createValidationResponse({ errors: [ApplicationError.create(err)] });\n        }\n        // Not using `glob`'s response-length, becuse it is `1` if there's no match for `globMapExternalExamples`.\n        // Instead, increment on every match\n        matchingFilePathsMapping++;\n        return _validate(\n            Object.keys(mapExternalExamples),\n            statistics => _handleExamplesByMapValidation(openapiSpec, mapExternalExamples, statistics, {\n                cwdToMappingFile,\n                dirPathMapExternalExamples: path.dirname(filePathMapExternalExamples)\n            }).map((/** @type ApplicationError */ error) => Object.assign(error, {\n                mapFilePath: filePathMapExternalExamples\n            }))\n        );\n    });\n    return _.merge(\n        responses.reduce((res, response) => {\n            if (!res) { return response; }\n            return _mergeValidationResponses(res, response);\n        }, null),\n        { statistics: { matchingFilePathsMapping } }\n    );\n}\n\n/**\n * Validates a single external example.\n * @param {String}  filePathSchema      File-path to the OpenAPI-spec\n * @param {String}  pathSchema         JSON-path to the schema\n * @param {String}  filePathExample     File-path to the external example-file\n * @returns {ValidationResponse}\n */\nfunction validateExample(filePathSchema, pathSchema, filePathExample) {\n    let example = null,\n        schema = null,\n        openapiSpec = null;\n    try {\n        example = JSON.parse(fs.readFileSync(filePathExample, 'utf-8'));\n        openapiSpec = JSON.parse(fs.readFileSync(filePathSchema, 'utf-8'));\n        schema = _extractSchema(pathSchema, openapiSpec);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return _validate(\n        [pathSchema],\n        statistics => _validateExample({\n            createValidator: _initValidatorFactory(openapiSpec),\n            schema: schema,\n            example,\n            statistics,\n            filePathExample\n        })\n    );\n}\n\n// Private\n\n/**\n * Top-level validator. Prepares common values, required for the validation, then calles the validator and prepares\n * the result for the output.\n * @param {Array.<String>}      pathsSchema             JSON-paths to the schemas of the request/responses\n * @param {ValidationHandler}   validationHandler       The handler which performs the validation. It will receive the\n *                                                      statistics-object as argument and has to return an Array of\n *                                                      errors (or an empty Array, when all examples are valid)\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validate(pathsSchema, validationHandler) {\n    const statistics = _initStatistics({ schemaPaths: pathsSchema }),\n        errors = validationHandler(statistics);\n    return createValidationResponse({ errors, statistics });\n}\n\n/**\n * Validates examples by a mapping-file.\n * @param {Object}                  openapiSpec                     OpenAPI-spec\n * @param {Object}                  mapExternalExamples             Mapping-file containing JSON-paths to response-\n *                                                                  schemas as key and a single file-path or Array of\n *                                                                  file-paths to\n * @param {ValidationStatistics}    statistics                      Validation-statistics\n * @param {boolean}                 [cwdToMappingFile=false]        Change working directory for resolving the example-\n *                                                                  paths (relative to the mapping-file)\n * @param {string}                  [dirPathMapExternalExamples]    The directory-path of the mapping-file\n * @returns {Array.<ApplicationError>}\n * @private\n */\nfunction _handleExamplesByMapValidation(openapiSpec, mapExternalExamples, statistics,\n    { cwdToMappingFile = false, dirPathMapExternalExamples }\n) {\n    return _(mapExternalExamples)\n        .entries()\n        .flatMap(([pathSchema, filePathsExample]) => {\n            let schema = null;\n            try {\n                schema = _extractSchema(pathSchema, openapiSpec);\n            } catch (/** @type ErrorJsonPathNotFound */ err) {\n                // If the response-schema can't be found, don't even attempt to process the examples\n                return ApplicationError.create(err);\n            }\n            return _([filePathsExample])\n                .flatten()\n                .flatMap(filePathExample => {\n                    let example = null;\n                    try {\n                        const resolvedFilePathExample = cwdToMappingFile\n                            ? path.join(dirPathMapExternalExamples, filePathExample)\n                            : filePathExample;\n                        example = JSON.parse(fs.readFileSync(resolvedFilePathExample, 'utf-8'));\n                    } catch (err) {\n                        return ApplicationError.create(err);\n                    }\n                    return _validateExample({\n                        createValidator: _initValidatorFactory(openapiSpec),\n                        schema,\n                        example,\n                        statistics,\n                        filePathExample\n                    });\n                })\n                .value();\n        })\n        .value();\n}\n\n/**\n * Merges two `ValidationResponses` together and returns the merged result. The passed `ValidationResponse`s won't be\n * modified.\n * @param {ValidationResponse} response1\n * @param {ValidationResponse} response2\n * @returns {ValidationResponse}\n * @private\n */\nfunction _mergeValidationResponses(response1, response2) {\n    return createValidationResponse({\n        errors: response1.errors.concat(response2.errors),\n        statistics: _.entries(response1.statistics)\n            .reduce((res, [key, val]) => {\n                res[key] = val + response2.statistics[key];\n                return res;\n            }, _initStatistics({ schemaPaths: [] }))\n    });\n}\n\n/**\n * Extracts all JSON-paths to examples from a OpenAPI-spec\n * @param {Object}  openapiSpec         OpenAPI-spec\n * @param {String}  jsonPathToExamples  JSON-path to the examples, in the OpenAPI-Spec\n * @returns {Array.<String>} JSON-paths to examples\n * @private\n */\nfunction _extractExamplePaths(openapiSpec, jsonPathToExamples) {\n    return jsonPath({\n        json: openapiSpec,\n        path: jsonPathToExamples,\n        resultType: 'path'\n    });\n}\n\n/**\n * Extracts all JSON-paths to schemas from a OpenAPI-spec\n * @param {Object}  openapiSpec         OpenAPI-spec\n * @param {String}  jsonPathToSchemas   JSON-path to the schemas, in the OpenAPI-Spec\n * @returns {Array.<String>} JSON-paths to schemas\n * @private\n */\nfunction _extractSchemaPaths(openapiSpec, jsonPathToSchemas) {\n    return jsonPath({\n        json: openapiSpec,\n        path: jsonPathToSchemas,\n        resultType: 'path'\n    });\n}\n\n/**\n * Validates examples at the given paths in the OpenAPI-spec.\n * @param {Array.<String>}  pathsExamples   JSON-paths to examples\n * @param {Object}          openapiSpec     OpenAPI-spec\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validateExamplesPaths(pathsExamples, openapiSpec) {\n    const\n        createValidator = _initValidatorFactory(openapiSpec),\n        validationMap = _buildValidationMap(pathsExamples),\n        schemaPaths = _extractSchemaPaths(openapiSpec,\n            Determiner.getImplementation(openapiSpec).getJsonPathToSchemas()),\n        // Object.keys(validationMap),\n        statistics = _initStatistics({ schemaPaths }),\n        validationResult = {\n            valid: true,\n            statistics,\n            errors: []\n        };\n    schemaPaths.forEach(pathSchema => {\n        _validateSchema({ openapiSpec, createValidator, pathSchema: pathSchema, validationMap, statistics,\n            validationResult });\n    });\n    return validationResult;\n}\n\n/**\n * Validates a single response-schema.\n * @param {Object}                  openapiSpec         OpenAPI-spec\n * @param {ajv}                     createValidator     Factory, to create JSON-schema validator\n * @param {string}                  pathSchema          JSON-path to request/response-schema\n * @param {Object.<String, String>} validationMap       Map with schema-path as key and example-paths as value\n * @param {Object}                  statistics          Object to contain statistics metrics\n * @param {Object}                  validationResult    Container, for the validation-results\n * @private\n */\nfunction _validateSchema({ openapiSpec, createValidator, pathSchema, validationMap, statistics,\n    validationResult }) {\n    const\n        errors = validationResult.errors,\n        pathExample = validationMap[pathSchema],\n        example = _getExampleByPath(pathExample, openapiSpec),\n        // Missing schemas or examples will be considered invalid.\n        schema = _extractSchema(pathSchema, openapiSpec, false),\n        curErrors = _validateExample({\n            createValidator,\n            schema,\n            example,\n            statistics\n        }).map(error => {\n            if (pathExample) {\n                error.examplePath = jsonPath.toPointer(jsonPath.toPathArray(pathExample));\n            }\n            return error;\n        });\n    if (!curErrors.length) { return; }\n    validationResult.valid = false;\n    errors.splice(errors.length - 1, 0, ...curErrors);\n}\n\n/**\n * Creates a container-object for the validation statistics.\n * @param {Array.<String>}  schemaPaths     JSON-paths to the request/response schemas\n * @returns {ValidationStatistics}\n * @private\n */\nfunction _initStatistics({ schemaPaths }) {\n    return {\n        schemasWithExamples: schemaPaths.length,\n        examplesTotal: 0,\n        examplesWithoutSchema: 0\n    };\n}\n\n/**\n * Extract object(s) by the given JSON-path\n * @param {String}  path        JSON-path\n * @param {Object}  json        JSON to extract the object(s) from\n * @returns {Object|Array.<Object>|undefined} All matching objects. Single object if there is only one match\n * @private\n */\nfunction _getObjectByPath(path, json) {\n    return jsonPath({\n        json,\n        path,\n        flatten: true,\n        wrap: false,\n        resultType: 'value'\n    });\n}\n\n/**\n * Extract example by the given JSON-path\n * @param {String}  path        JSON-path\n * @param {Object}  json        JSON to extract the example from\n * @returns {Object|Array.<Object>|undefined} All matching examples. Single example if there is only one match.\n * @private\n */\nfunction _getExampleByPath(path, json) {\n    if (!path) { return null; }\n\n    var dereferencedExample;\n\n    let object = jsonPath({\n        json,\n        path,\n        flatten: true,\n        wrap: false,\n        resultType: 'value',\n        callback(value) {\n            if (typeof value.startsWith !== 'function') { return; }\n            if (!value.startsWith('#')) { return; }\n            const pointer = value.substring(1),\n                definition = JsonPointer.get(json, pointer);\n            if (definition) {\n                dereferencedExample = definition;\n            }\n        }\n    });\n\n    if (dereferencedExample) {\n        return dereferencedExample.value;\n    }\n\n    return object;\n}\n\n/**\n * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value. The path of the\n * schema is derived from the path to the example and doesn't necessarily mean that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-path as key and example-paths as value\n * @private\n */\nfunction _buildValidationMap(pathsExamples) {\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const pathSchema = _getSchemaPathOfExample(pathExample);\n        validationMap[pathSchema] = pathExample;\n        return validationMap;\n    }, {});\n}\n\n/**\n * Validates example against the schema. The precondition for this function to work is that the example exists at the\n * given path.\n * `pathExample` and `filePathExample` are exclusively mandatory.\n * itself\n * @param {Function}    createValidator     Factory, to create JSON-schema validator\n * @param {Object}      schema              JSON-schema for the request/response\n * @param {Object}      example             Example to validate\n * @param {Object}      statistics          Object to contain statistics metrics\n * @param {String}      [filePathExample]   File-path to the example file\n * @returns {Array.<Object>} Array with errors. Empty array, if examples are valid\n * @private\n */\nfunction _validateExample({ createValidator, schema, example, statistics, filePathExample }) {\n    const\n        errors = [];\n\n    if (schema && !example) {\n        statistics.schemasWithExamples--;\n        const error = new ApplicationError(ERR_TYPE__VALIDATION, {\n            message: 'Schema: ' + JSON.stringify(schema) + ' is missing examples.'\n        });\n        return errors.concat(error);\n    } else if (!schema && example) {\n        statistics.examplesTotal++;\n        statistics.examplesWithoutSchema++;\n        const error = new ApplicationError(ERR_TYPE__VALIDATION, {\n            message: 'Example: ' + JSON.stringify(example) + ' is missing a schema.'\n        });\n        return errors.concat(error());\n    }\n\n    statistics.examplesTotal++;\n\n    const validate = compileValidate(createValidator(), schema);\n    if (validate(example)) { return errors; }\n    return errors.concat(...validate.errors.map(ApplicationError.create))\n        .map(error => {\n            if (!filePathExample) { return error; }\n            error.exampleFilePath = filePathExample;\n            return error;\n        });\n}\n\n/**\n * Gets a JSON-path to the corresponding response-schema, based on a JSON-path to an example.\n * @param {String}  pathExample JSON-path to example\n * @returns {String} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPathOfExample(pathExample) {\n    const\n        pathSegs = jsonPath.toPathArray(pathExample).slice(),\n        idxExamples = pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return jsonPath.toPathString(pathSegs);\n}\n\n/**\n * Create a new instance of a JSON schema validator\n * @returns {ajv}\n * @private\n */\nfunction _initValidatorFactory(specSchema) {\n    return getValidatorFactory(specSchema, {\n        allErrors: true\n    });\n}\n\n/**\n * Extracts the schema in the OpenAPI-spec at the given JSON-path.\n * @param   {string}    pathSchema                          JSON-path to request/response schema\n * @param   {Object}    openapiSpec                         OpenAPI-spec\n * @param   {boolean}   [suppressErrorIfNotFound=false]     Don't throw `ErrorJsonPathNotFound` if the repsonse does not\n *                                                          exist at the given JSON-path\n * @returns {Object|Array.<Object>|undefined} Matching schema(s)\n * @throws  {ErrorJsonPathNotFound} Thrown, when there is no response-schema at the given path and\n *                                  `suppressErrorIfNotFound` is false\n * @private\n */\nfunction _extractSchema(pathSchema, openapiSpec, suppressErrorIfNotFound = false) {\n    const schema = _getObjectByPath(pathSchema, openapiSpec);\n    if (!suppressErrorIfNotFound && !schema) {\n        throw new ErrorJsonPathNotFound(`Path to schema can't be found: '${pathSchema}'`, {\n            params: {\n                path: pathSchema\n            }\n        });\n    }\n    return schema;\n}\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"glob\");","const { JSONPath } = require('jsonpath-plus'),\n    JsonPointer = require('json-pointer'),\n    Ajv = require('ajv');\n\nconst PROP__ID = '$id',\n    JSON_PATH__REFS = '$..\\$ref',\n    ID__SPEC_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/defs.json',\n    ID__SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/schema.json';\n\nmodule.exports = {\n    getValidatorFactory,\n    compileValidate\n};\n\n/**\n * Get a factory-function to create a prepared validator-instance\n * @param {Object}  specSchema  OpenAPI-spec of which potential local references will be extracted\n * @param {Object}  [options]   Options for the validator\n * @returns {function(): (ajv | ajv.Ajv)}\n */\nfunction getValidatorFactory(specSchema, options) {\n    const preparedSpecSchema = _createReferenceSchema(specSchema);\n    return () => {\n        const validator = new Ajv(options);\n        validator.addSchema(preparedSpecSchema);\n        return validator;\n    };\n}\n\n/**\n * Compiles the validator-function.\n * @param {ajv | ajv.Ajv}   validator       Validator-instance\n * @param {Object}          schema          The request/response schema, against which the examples will be validated\n * @returns {ajv.ValidateFunction}\n */\nfunction compileValidate(validator, schema) {\n    const preparedSchema = _prepareSchema(schema, ID__SCHEMA);\n    _replaceRefsToPreparedSpecSchema(preparedSchema);\n    return validator.compile(preparedSchema);\n}\n\n/**\n * Prepares the schema, to be used with internal-references\n * @param {Object}  specSchema  The schema to be prebared\n * @param {String}  idSchema    The unique ID for the schema\n * @returns {Object}\n * @private\n */\nfunction _prepareSchema(specSchema, idSchema) {\n    const preparedSchema = Object.assign({}, specSchema);\n    preparedSchema[PROP__ID] = idSchema;\n    return preparedSchema;\n}\n\n/**\n * Replaces all internal references to the schema, with the extracted references, based on the origin OpenAPI-spec\n * @param {Object}  schema  The schema, containing references have to be replaced\n * @private\n */\nfunction _replaceRefsToPreparedSpecSchema(schema) {\n    // eslint-disable-next-line new-cap\n    JSONPath({\n        path: JSON_PATH__REFS,\n        json: schema,\n        callback(value, type, payload) {\n            if (!value.startsWith('#')) { return; }\n            payload.parent[payload.parentProperty] = `${ ID__SPEC_SCHEMA }${ value }`;\n        }\n    });\n}\n\n/**\n * Extracts all references and returns a new schema, containing only those.\n * @param {Object} specSchema   Schema, which references shall be extracted\n * @returns {Object}\n * @private\n */\nfunction _createReferenceSchema(specSchema) {\n    const refSchema = {\n        [PROP__ID]: ID__SPEC_SCHEMA\n    };\n    // eslint-disable-next-line new-cap\n    JSONPath({\n        path: JSON_PATH__REFS,\n        json: specSchema,\n        callback(value) {\n            if (!value.startsWith('#')) { return; }\n            const pointer = value.substring(1),\n                definition = JsonPointer.get(specSchema, pointer);\n            JsonPointer.set(refSchema, pointer, definition);\n        }\n    });\n    return refSchema;\n}\n","module.exports = require(\"ajv\");","const implV2 = require('./v2/index'),\n    implV3 = require('./v3/index');\n\nconst REGEX__OPEN_API = /^3\\./;\n\nmodule.exports = {\n    getImplementation\n};\n\n/**\n * Get the version-specific implementation for the OpenAPI-spec. Currently v2 and v3 are supported\n * @param {Object}  openapiSpec OpenAPI-spec\n * @returns {Object|null}\n */\nfunction getImplementation(openapiSpec) {\n    if (typeof openapiSpec.swagger === 'string') {\n        return implV2;\n    }\n    if (openapiSpec.openapi && openapiSpec.openapi.match(REGEX__OPEN_API)) {\n        return implV3;\n    }\n    return null;\n}\n","// CONSTANTS\n\nconst PATH__EXAMPLES = '$..examples.application/json';\nconst PATH__SCHEMAS = '$..schema';\n\nmodule.exports = {\n    getJsonPathToExamples,\n    getJsonPathToSchemas\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPath to the examples\n * @returns {string}    JSONPath\n */\nfunction getJsonPathToExamples() { return PATH__EXAMPLES; }\n\n/**\n * Get the JSONPath to the schemas\n * @returns {string}    JSONPath\n */\nfunction getJsonPathToSchemas() { return PATH__SCHEMAS; }\n","// CONSTANTS\n\nconst PATH__EXAMPLES = '$..[responses,requestBody]..content.application/json.examples..[value,$ref]';\nconst PATH__SCHEMAS = '$..[responses,requestBody]..content.application/json.schema';\n\n// PUBLIC API\n\nmodule.exports = {\n    getJsonPathToExamples,\n    getJsonPathToSchemas\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPath to the examples\n * @returns {string}    JSONPath\n */\nfunction getJsonPathToExamples() {\n    return PATH__EXAMPLES;\n}\n\nfunction getJsonPathToSchemas() {\n    return PATH__SCHEMAS;\n}\n","const\n    _ = require('lodash'),\n    { ENOENT } = require('errno').code;\n\n// TYPEDEFINITIONS\n\n/**\n * @typedef {{}} CustomError\n * @augments Error\n */\n\n/**\n * ApplicationErrorOptions\n * @typedef {{\n *      [dataPath]: string,\n *      [examplePath]: string,\n *      [exampleFilePath]: string,\n *      [keyword]: string,\n *      [message]: string,\n *      [mapFilePath]: string,\n *      [params]: {\n *          [path]: string,\n *          [missingProperty]: string,\n *          [type]: string\n *      },\n *      [schemaPath]: string\n * }} ApplicationErrorOptions\n */\n\n// CLASSES\n\n/**\n * Unified application-error\n */\nclass ApplicationError {\n    /**\n     * Factory-function, which is able to consume validation-errors and JS-errors. If a validation error is passed, all\n     * properties will be adopted.\n     * @param {Error|CustomError}   err     Javascript-, validation- or custom-error, to create the application-error\n     *                                      from\n     * @returns {ApplicationError} Unified application-error instance\n     */\n    static create(err) {\n        const\n            { ERR_TYPE__VALIDATION } = ApplicationError,\n            { code, message, path, cause } = err,               // Certain properties of Javascript-errors\n            type = code || err.type || ERR_TYPE__VALIDATION,    // If `code` is available then it's a Javascript-error\n            options = { message };\n        if (ERR_TYPE__VALIDATION === type) {\n            // If it's an validation-error, copy all properties\n            _.merge(options, err);\n        } else {\n            // Copy certain properties of Javascript-error (but only if available)\n            path && _.merge(options, { params: { path } });\n            cause && _.merge(options, cause);\n        }\n        return new ApplicationError(type, options);\n    }\n\n    /**\n     * Constructor\n     * @param {string}                  type        Type of error (see statics)\n     * @param {ApplicationErrorOptions} [options]   Optional properties\n     */\n    constructor(type, options = {}) {\n        Object.assign(this, {\n            type,\n            ...options\n        });\n    }\n}\n\n// PUBLIC API\n\nmodule.exports = ApplicationError;\n\n// PUBLIC STATICS\n\n// Types of errors\nApplicationError.ERR_TYPE__VALIDATION = 'Validation';\nApplicationError.ERR_TYPE__JSON_PATH_NOT_FOUND = 'JsonPathNotFound';\nApplicationError.ERR_TYPE__JS_ENOENT = ENOENT.code;\n\n","module.exports = {\n    createValidationResponse\n};\n\n/**\n * Creates a unified response for the validation-result\n * @param {Array.<ApplicationError>}    errors\n * @param {ValidationStatistics}        statistics\n * @returns {ValidationResponse}\n * @private\n */\nfunction createValidationResponse({ errors, statistics = {} }) {\n    return {\n        valid: !errors.length,\n        statistics,\n        errors\n    };\n}\n"],"sourceRoot":""}